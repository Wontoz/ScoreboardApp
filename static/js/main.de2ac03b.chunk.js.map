{"version":3,"sources":["img/Simumatik_Logo.png","components/AlterScoreModal.js","components/AddPlayerButton.js","components/TableBody.js","App.js","reportWebVitals.js","index.js"],"names":["AlterScoreModal","props","icon","useState","isVisible","setVisible","showModal","hideModal","handleYesClick","action","scoreType","ArrowUpOutlined","onClick","ArrowDownOutlined","body","title","visible","onCancel","onOk","closable","footer","className","AddPlayerButton","playerName","setPlayerName","size","placeholder","onChange","e","target","value","TableBody","key","participant","wins","losses","players","setPlayers","dataIndex","defaultSortOrder","sorter","a","b","align","render","record","playerKey","newArr","slice","handleWinIncrease","handleLossIncrease","CloseOutlined","newPlayers","filter","item","length","i","updateTable","handleDeleteRow","columns","style","padding","textAlign","borderBottom","span","input","newPlayerStat","joined","concat","bind","dataSource","pagination","showSorterTooltip","Header","Layout","Content","Sider","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de2ac03b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Simumatik_Logo.0b4a6fef.png\";","import React, { useState } from 'react';\r\nimport { Modal, Button } from 'antd';\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\r\n\r\n//Module that's displayed when user clicks on either arrow that alters a player's score\r\nconst AlterScoreModal = (props) => {\r\n\r\n    //A state is used to determine if modal should be displayed\r\n    let [isVisible, setVisible] = useState(false);\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    };\r\n\r\n    function hideModal() {\r\n        setVisible(false);\r\n    };\r\n\r\n    //Update table using the funciton parameter that was sent in Table.js\r\n    function handleYesClick() {\r\n        props.action();\r\n        hideModal();\r\n    }\r\n    let icon;\r\n    if(props.scoreType ==='wins'){\r\n        icon = <ArrowUpOutlined onClick={showModal}></ArrowUpOutlined>\r\n    } else if(props.scoreType === 'losses'){\r\n        icon = <ArrowDownOutlined onClick={showModal}></ArrowDownOutlined>;\r\n    };\r\n    \r\n    let body =\r\n        <Modal\r\n            title=\"Alter score\"\r\n            visible={isVisible}\r\n            onCancel={hideModal}\r\n            onOk={handleYesClick}\r\n            closable={false}\r\n            footer={[\r\n                <Button className={\"Btn-red\"} onClick={hideModal}>No</Button>,\r\n                <Button className={\"Btn-green\"} onClick={handleYesClick}>Yes</Button>\r\n            ]}>\r\n            Are you sure you want to adjust the {props.scoreType} for this player?\r\n        </Modal>;\r\n\r\n    return (\r\n        <>\r\n            {icon}\r\n            {body}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AlterScoreModal;","import React, { useState } from 'react';\r\nimport { Button, Modal, Input } from 'antd';\r\n\r\n//Module that's displayed when user clicks on the \"Add Person\"-button\r\nconst AddPlayerButton = (props) => {\r\n\r\n    //A state is used to determine if modal should be displayed\r\n    let [isVisible, setVisible] = useState(false);\r\n    let [playerName, setPlayerName] = useState('');\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    };\r\n\r\n    function hideModal() {\r\n        setVisible(false);\r\n    };\r\n\r\n    //Update name-variable on input change\r\n    function handleInputChange(e) {\r\n        setPlayerName(e.target.value);\r\n    };\r\n\r\n    //Send name-variable to input-handler in Table.js\r\n    function handleAddPlayer() {\r\n        props.action(playerName);\r\n        hideModal();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button className={\"Btn-green\"} onClick={showModal}>\r\n                Add Person\r\n            </Button>\r\n            <Modal\r\n                title=\"Add player\"\r\n                visible={isVisible}\r\n                footer={[\r\n                    <Button className={\"Btn-red\"} onClick={hideModal}>Cancel</Button>,\r\n                    <Button className={\"Btn-green\"} onClick={handleAddPlayer}>Add</Button>\r\n                ]}>\r\n                <Input size=\"large\" placeholder=\"Enter name:\" onChange={handleInputChange} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddPlayerButton;","import React, { useState } from 'react';\r\nimport { Table, Row, Col } from 'antd';\r\nimport AlterScoreModal from './AlterScoreModal';\r\nimport AddPlayerButton from './AddPlayerButton';\r\nimport { ArrowUpOutlined, ArrowDownOutlined, CloseOutlined } from '@ant-design/icons';\r\n\r\nconst TableBody = () => {\r\n  const [players, setPlayers] = useState([\r\n    { key: 0, participant: 'Name 1', wins: 5, losses: 0 },\r\n    { key: 1, participant: 'Name 2', wins: 4, losses: 0 },\r\n    { key: 2, participant: 'Name 3', wins: 3, losses: 0 }\r\n  ]);\r\n\r\n  const [columns] = useState([\r\n    {\r\n      title: 'Participants',\r\n      dataIndex: 'participant',\r\n      key: 'participant',\r\n      defaultSortOrder: 'descend',\r\n      sorter: (a, b) => (a.wins - a.losses) - (b.wins - b.losses),\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: 'Wins',\r\n      dataIndex: 'wins',\r\n      key: 'wins',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: 'Losses',\r\n      dataIndex: 'losses',\r\n      key: 'losses',\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: <ArrowUpOutlined />,\r\n      dataIndex: 'addWin',\r\n      key: 'addWin',\r\n      render: (key, record) => (\r\n        <AlterScoreModal scoreType=\"wins\" key={record.key} action={() => handleWinIncrease(record.key)}></AlterScoreModal>\r\n      ),\r\n      align: 'center'\r\n    },\r\n\r\n    {\r\n      title: <ArrowDownOutlined />,\r\n      dataIndex: 'addLoss',\r\n      key: 'addLoss',\r\n      render: (key, record,) => (\r\n        <AlterScoreModal scoreType=\"losses\" key={record.key} action={() => handleLossIncrease(record.key)}></AlterScoreModal>\r\n      ),\r\n      align: 'center'\r\n    },\r\n    {\r\n      title: <CloseOutlined />,\r\n      key: 'delete',\r\n      render: (key, record) => (\r\n        <CloseOutlined onClick={() => handleDeleteRow(record.key)} />\r\n      ),\r\n      align: 'center'\r\n    }\r\n  ]);\r\n\r\n  //Increment wins at a specific row, determined by the key variable\r\n  function handleWinIncrease(playerKey) {\r\n    const newArr = players.slice();\r\n    newArr[playerKey].wins++;\r\n    setPlayers(newArr);\r\n  }\r\n\r\n  //Increment losses at a specific row, determined by the key variable\r\n  function handleLossIncrease(playerKey) {\r\n    const newArr = players.slice();\r\n    newArr[playerKey].losses++;\r\n    setPlayers(newArr)\r\n  }\r\n\r\n  //Updates keys after performed deletion\r\n  //E.g. if row 5 is deleted:\r\n  //Row 6 key is updated from 6 --> 5\r\n  //Row 7 key is updated from 7 --> 6 etc.\r\n  function updateTable(key) {\r\n    const newArr = players.slice()\r\n    const length = newArr.length;\r\n    for (let i = key; i < length; i++) {\r\n      newArr[i].key--;\r\n    };\r\n  }\r\n\r\n  //Delete a specific row, determined by the key variable\r\n  function handleDeleteRow(key) {\r\n    const newPlayers = players.filter((item) => item.key !== key);\r\n    setPlayers(newPlayers)\r\n    updateTable(key);\r\n  }\r\n\r\n  //Add new player to table by manipulating the player-state and adding a new row\r\n  function handleNewPlayer(input) {\r\n    const newPlayerStat = [{ key: (players.length), participant: input, wins: 0, losses: 0 }]\r\n    const joined = players.concat(newPlayerStat);\r\n    setPlayers(joined)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Row style={{\r\n        padding: '15px',\r\n        textAlign: 'center',\r\n        borderBottom: \"1px solid #9fad87\"\r\n      }}>\r\n        <Col span={12}>\r\n          <h1>Scoreboard</h1>\r\n        </Col>\r\n        <Col span={12}>\r\n          <AddPlayerButton key={\"AddPlayerButton\"} action={handleNewPlayer.bind(this)}></AddPlayerButton>\r\n        </Col>\r\n\r\n      </Row>\r\n      <Table columns={columns} dataSource={players} pagination={false} showSorterTooltip={false} style={{ borderBottom: \"1px solid #9fad87\" }}></Table>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TableBody;","import logo from './img/Simumatik_Logo.png';\nimport 'antd/dist/antd.css';\nimport TableBody from './components/TableBody';\nimport { Layout } from 'antd';\nimport './App.css';\n\nconst { Header, Content, Sider } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Header className={\"header\"}>\n        <img src={logo} alt=\"logo\" className={\"logo\"} />\n      </Header>\n      <Sider className={\"sider left\"} />\n      <Layout>\n        <Content className={\"content\"}>\n          <TableBody></TableBody>\n        </Content>\n      </Layout>\n      <Sider className={\"sider right\"} />\n    </Layout>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}