{"version":3,"sources":["components/AlterScoreModal.js","components/AddPlayerButton.js","components/TableHeader.js","components/TableBody.js","App.js","index.js"],"names":["AlterScoreModal","props","icon","useState","isVisible","setVisible","showModal","hideModal","handleYesClick","action","scoreType","ArrowUpOutlined","onClick","ArrowDownOutlined","body","title","visible","onCancel","onOk","closable","footer","className","AddPlayerButton","playerName","setPlayerName","size","placeholder","onChange","e","target","value","TableHeader","span","TableBody","state","players","key","participant","wins","losses","columns","dataIndex","defaultSortOrder","sorter","a","b","align","render","record","handleWinIncrease","bind","handleLossIncrease","CloseOutlined","handleDeleteRow","playerKey","newArr","this","slice","setState","length","i","newPlayers","filter","item","updateTable","input","newPlayerStat","joined","concat","handleNewPlayer","dataSource","pagination","showSorterTooltip","style","borderBottom","React","Component","Header","Layout","Content","Sider","App","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bfe59fb5.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Modal, Button } from 'antd';\r\nimport { ArrowUpOutlined, ArrowDownOutlined } from '@ant-design/icons';\r\n\r\n//Module that's displayed when user clicks on either arrow that alters a player's score\r\nconst AlterScoreModal = (props) => {\r\n\r\n    //A state is used to determine if modal should be displayed\r\n    let [isVisible, setVisible] = useState(false);\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    };\r\n\r\n    function hideModal() {\r\n        setVisible(false);\r\n    };\r\n\r\n    //Update table by executing props.action (handleNewPlayer in TableBody.js)\r\n    function handleYesClick() {\r\n        props.action();\r\n        hideModal();\r\n    }\r\n    let icon;\r\n    if(props.scoreType ==='wins'){\r\n        icon = <ArrowUpOutlined onClick={showModal}></ArrowUpOutlined>\r\n    } else if(props.scoreType === 'losses'){\r\n        icon = <ArrowDownOutlined onClick={showModal}></ArrowDownOutlined>;\r\n    };\r\n    \r\n    let body =\r\n        <Modal\r\n            title=\"Alter score\"\r\n            visible={isVisible}\r\n            onCancel={hideModal}\r\n            onOk={handleYesClick}\r\n            closable={false}\r\n            footer={[\r\n                <Button className={\"Btn-red\"} onClick={hideModal}>No</Button>,\r\n                <Button className={\"Btn-green\"} onClick={handleYesClick}>Yes</Button>\r\n            ]}>\r\n            Are you sure you want to adjust the {props.scoreType} for this player? \r\n        </Modal>;\r\n\r\n    return (\r\n        <>\r\n            {icon}\r\n            {body}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AlterScoreModal;","import React, { useState } from 'react';\r\nimport { Button, Modal, Input } from 'antd';\r\n\r\n//Module that's displayed when user clicks on the \"Add Person\"-button\r\nconst AddPlayerButton = (props) => {\r\n\r\n    //A state is used to determine if modal should be displayed\r\n    let [isVisible, setVisible] = useState(false);\r\n    let [playerName, setPlayerName] = useState('');\r\n\r\n    function showModal() {\r\n        setVisible(true);\r\n    };\r\n\r\n    function hideModal() {\r\n        setVisible(false);\r\n    };\r\n\r\n    //Update name-variable on input change\r\n    function handleInputChange(e) {\r\n        setPlayerName(e.target.value);\r\n    };\r\n\r\n    //Add player by sending the input value of the modal to function handleNewPlayer.\r\n    function handleAddClick() {\r\n        props.action(playerName);\r\n        hideModal();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button className={\"Btn-green\"} onClick={showModal}>\r\n                Add Participant\r\n            </Button>\r\n            <Modal\r\n                title=\"Add participant\"\r\n                visible={isVisible}\r\n                onCancel={hideModal}\r\n                footer={[\r\n                    <Button className={\"Btn-red\"} onClick={hideModal}>Cancel</Button>,\r\n                    <Button className={\"Btn-green\"} onClick={handleAddClick}>Add</Button>\r\n                ]}>\r\n                <Input size=\"large\" placeholder=\"Enter name:\" onChange={handleInputChange} />\r\n            </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddPlayerButton;","import React from 'react';\r\nimport AddPlayerButton from './AddPlayerButton';\r\nimport { Row, Col } from 'antd';\r\n\r\nconst TableHeader = (props) => {\r\n\r\n  //Sends handleNewPlayer to AddPlayerButton, where the function will be executed after a \"Yes\"-click (AddPlayerButton contains a modal)\r\n  return (\r\n    <Row className={\"row\"}>\r\n      <Col span={12}>\r\n        <h2>Scoreboard</h2>\r\n      </Col>\r\n      <Col span={12}>\r\n        <AddPlayerButton action={props.action}/>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default TableHeader;","import React from 'react';\r\nimport { Table } from 'antd';\r\nimport AlterScoreModal from './AlterScoreModal';\r\nimport TableHeader from './TableHeader';\r\nimport { ArrowUpOutlined, ArrowDownOutlined, CloseOutlined} from '@ant-design/icons';\r\n\r\nclass TableBody extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //Initialize 3 players along with all table which is to be displayed\r\n    this.state = {\r\n      players: [\r\n        { key: 0, participant: 'Name 1', wins: 5, losses: 0 },\r\n        { key: 1, participant: 'Name 2', wins: 4, losses: 0 },\r\n        { key: 2, participant: 'Name 3', wins: 3, losses: 0 },\r\n      ],\r\n      columns: [\r\n        {\r\n          title: 'Participants',\r\n          dataIndex: 'participant',\r\n          key: 'participant',\r\n          defaultSortOrder: 'descend',\r\n          sorter: (a, b) => (a.wins - a.losses) - (b.wins - b.losses),\r\n          align: 'center'\r\n        },\r\n        {\r\n          title: 'Wins',\r\n          dataIndex: 'wins',\r\n          key: 'wins',\r\n          align: 'center'\r\n        },\r\n        {\r\n          title: 'Losses',\r\n          dataIndex: 'losses',\r\n          key: 'losses',\r\n          align: 'center'\r\n        },\r\n        {\r\n          title: <ArrowUpOutlined />,\r\n          dataIndex: 'addWin',\r\n          key: 'addWin',\r\n          render: (key, record) => (\r\n              <AlterScoreModal scoreType=\"wins\" action={this.handleWinIncrease.bind(this, record.key)}></AlterScoreModal> //Modal which triggers when up-arrow is clicked\r\n          ),\r\n          align: 'center'\r\n        },\r\n\r\n        {\r\n          title: <ArrowDownOutlined />,\r\n          dataIndex: 'addLoss',\r\n          key: 'addLoss',\r\n          render: (key, record,) => (\r\n            <AlterScoreModal scoreType=\"losses\" action={this.handleLossIncrease.bind(this, record.key)}></AlterScoreModal> //Modal which triggers when down-arrow is clicked\r\n          ),\r\n          align: 'center'\r\n        },\r\n        {\r\n          title: <CloseOutlined />,\r\n          key: 'delete',\r\n          render: (key, record) => (\r\n            <CloseOutlined onClick={this.handleDeleteRow.bind(this, record.key)} /> //Icon which triggers handleDeleteRow on click\r\n          ),\r\n          align: 'center'\r\n        },\r\n      ],\r\n    }\r\n  }\r\n\r\n  //Increment wins at a specific row, determined by the key variable\r\n  handleWinIncrease(playerKey) {\r\n    const newArr = this.state.players.slice()\r\n    newArr[playerKey].wins++;\r\n    this.setState({ players: newArr })\r\n  }\r\n\r\n  //Increment losses at a specific row, determined by the key variable\r\n  handleLossIncrease(playerKey) {\r\n    const newArr = this.state.players.slice()\r\n    newArr[playerKey].losses++;\r\n    this.setState({ players: newArr })\r\n  }\r\n\r\n  //Updates keys after performed deletion\r\n  //E.g. if row 5 is deleted:\r\n  //Row 6 key is updated from 6 --> 5\r\n  //Row 7 key is updated from 7 --> 6 etc.\r\n  updateTable(key) {\r\n    const newArr = this.state.players.slice()\r\n    const length = newArr.length;\r\n    for (let i = key; i < length; i++) {\r\n      newArr[i].key--;\r\n    };\r\n  }\r\n\r\n  //Delete a specific row, determined by the key variable\r\n  handleDeleteRow(key) {\r\n    const { players } = this.state;\r\n    const newPlayers = players.filter((item) => item.key !== key);\r\n    this.setState({ players: newPlayers })\r\n    this.updateTable(key);\r\n  }\r\n\r\n  //Add new player to table by manipulating the player-state and adding a new row\r\n  handleNewPlayer(input) {\r\n    const { players } = this.state;\r\n    const newPlayerStat = [{ key: (players.length), participant: input, wins: 0, losses: 0 }]\r\n    const joined = this.state.players.concat(newPlayerStat);\r\n    this.setState({ players: joined })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <TableHeader action={this.handleNewPlayer.bind(this)}></TableHeader>\r\n        <Table columns={this.state.columns} dataSource={this.state.players} pagination={false} showSorterTooltip={false} style={{ borderBottom: \"1px solid #9fad87\" }}></Table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableBody;","import 'antd/dist/antd.css';\nimport TableBody from './components/TableBody';\nimport { Layout } from 'antd';\nimport './App.css';\n\nconst { Header, Content, Sider } = Layout;\n\nfunction App() {\n  return (\n    <Layout>\n      <Header className={\"header\"}>\n        <h1>Simple Scoreboard App</h1>\n      </Header>\n      <Sider className={\"sider left\"} />\n      <Layout>\n        <Content className={\"content\"}>\n          <TableBody></TableBody>\n        </Content>\n      </Layout>\n      <Sider className={\"sider right\"} />\n    </Layout>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}